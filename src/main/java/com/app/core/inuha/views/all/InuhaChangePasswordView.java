/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package com.app.core.inuha.views.all;

import com.app.common.controller.ApplicationController;
import com.app.common.helper.MessageModal;
import com.app.common.infrastructure.constants.ErrorConstant;
import com.app.common.infrastructure.exceptions.ServiceResponseException;
import com.app.core.inuha.services.InuhaTaiKhoanService;
import com.app.utils.ColorUtils;
import com.app.utils.ComponentUtils;
import com.app.utils.ValidateUtils;
import com.app.views.UI.dialog.LoadingDialog;
import com.app.core.inuha.views.guest.LoginView;
import com.formdev.flatlaf.FlatClientProperties;
import net.miginfocom.swing.MigLayout;

import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import raven.modal.ModalDialog;

/**
 *
 * @author inuHa
 */


public class InuhaChangePasswordView extends javax.swing.JPanel {

    private final InuhaTaiKhoanService nhanVienService = InuhaTaiKhoanService.getInstance();

    private ExecutorService executorService = Executors.newSingleThreadExecutor();

    private String currentOldPassword = null;    
    
    private String currentNewPassword = null;

    private String currentConfirmPassword = null;


    private void setupComponents() {
        setOpaque(false);
        setLayout(new MigLayout("fill, insets 20", "[center]", "[center]"));
        pnlLogin.setBackground(null);
        pnlLogin.setOpaque(false);

        txtOldPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Vui lòng nhập mật khẩu hiện tại");
        txtNewPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Vui lòng nhập mật khẩu mới");
        txtConfirmPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Vui lòng xác nhận mật khẩu mới");

        lbOldPassword.setForeground(ColorUtils.PRIMARY_TEXT);
        lbConfirmPassword.setForeground(ColorUtils.PRIMARY_TEXT);
        lbNewPassword.setForeground(ColorUtils.PRIMARY_TEXT);

        currentOldPassword = lbOldPassword.getText();
        currentNewPassword = lbNewPassword.getText();
        currentConfirmPassword = lbConfirmPassword.getText();

        lbDesc.setText(String.format(lbDesc.getText(), ValidateUtils.MIN_LENGTH_PASSWORD, ValidateUtils.MAX_LENGTH_PASSWORD));

        KeyListener keyEnter = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    handleSubmit();
                }
            }
        };

        txtOldPassword.addKeyListener(keyEnter);
        txtNewPassword.addKeyListener(keyEnter);
        txtConfirmPassword.addKeyListener(keyEnter);
        txtOldPassword.requestFocus();
    }

    /** Creates new form LoginView */
    public InuhaChangePasswordView() {
        initComponents();
        setupComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLogin = new com.app.views.UI.panel.RoundPanel();
        lbDesc = new javax.swing.JLabel();
        lbNewPassword = new javax.swing.JLabel();
        lbConfirmPassword = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        btnSubmit = new javax.swing.JButton();
        txtNewPassword = new javax.swing.JPasswordField();
        txtOldPassword = new javax.swing.JPasswordField();
        lbOldPassword = new javax.swing.JLabel();

        pnlLogin.setBackground(new java.awt.Color(51, 51, 51));
        pnlLogin.setOpaque(true);

        lbDesc.setFont(lbDesc.getFont().deriveFont(lbDesc.getFont().getSize()+1f));
        lbDesc.setText("Mật khẩu phải có từ %d đến %d kí tự");

        lbNewPassword.setFont(lbNewPassword.getFont().deriveFont(lbNewPassword.getFont().getStyle() | java.awt.Font.BOLD, lbNewPassword.getFont().getSize()+2));
        lbNewPassword.setText("New Password");

        lbConfirmPassword.setFont(lbConfirmPassword.getFont().deriveFont(lbConfirmPassword.getFont().getStyle() | java.awt.Font.BOLD, lbConfirmPassword.getFont().getSize()+2));
        lbConfirmPassword.setText("Confirm New Password");

        btnSubmit.setText("Đổi mật khẩu");
        btnSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lbOldPassword.setFont(lbOldPassword.getFont().deriveFont(lbOldPassword.getFont().getStyle() | java.awt.Font.BOLD, lbOldPassword.getFont().getSize()+2));
        lbOldPassword.setText("Old Password");

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbConfirmPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbNewPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbOldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtOldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbDesc)
                .addGap(18, 18, 18)
                .addComponent(lbOldPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbNewPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbConfirmPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 74, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
	handleSubmit();
    }//GEN-LAST:event_btnSubmitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel lbConfirmPassword;
    private javax.swing.JLabel lbDesc;
    private javax.swing.JLabel lbNewPassword;
    private javax.swing.JLabel lbOldPassword;
    private com.app.views.UI.panel.RoundPanel pnlLogin;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JPasswordField txtOldPassword;
    // End of variables declaration//GEN-END:variables


    private void handleSubmit() {
        LoadingDialog loadingDialog = new LoadingDialog(this);

        String oldPassword = txtOldPassword.getText().trim();
        String newPassword = txtNewPassword.getText().trim();
        String confirmPassword = txtConfirmPassword.getText().trim();

        String txtErrorOldPassword = oldPassword.isEmpty() ? currentOldPassword + " - Vui lòng nhập trường này" : null;
        String txtErrorNewPassword = newPassword.isEmpty() ? currentNewPassword + " - Vui lòng nhập trường này" : null;
        String txtErrorConfirmPassword = confirmPassword.isEmpty() ? currentConfirmPassword + " - Vui lòng nhập trường này" : null;

        int lenPassword = newPassword.length();

        if (txtErrorNewPassword == null) {
            if (lenPassword < ValidateUtils.MIN_LENGTH_PASSWORD) {
                txtErrorNewPassword = currentNewPassword + " - Phải có ít nhất " + ValidateUtils.MIN_LENGTH_PASSWORD + " ký tự";
            }

            if (lenPassword > ValidateUtils.MAX_LENGTH_PASSWORD) {
                txtErrorNewPassword = currentNewPassword + " - Nhiều nhất " + ValidateUtils.MAX_LENGTH_PASSWORD + " ký tự";
            }
        }

        if (!newPassword.equals(confirmPassword)) {
            txtErrorConfirmPassword = currentConfirmPassword + " - Mật khẩu nhập lại không chính xác";
        }
        
        boolean isErrorOldPassword = txtErrorOldPassword != null;
        boolean isErrorNewPassword = txtErrorNewPassword != null;
        boolean isErrorConfirmPassword = txtErrorConfirmPassword != null;

        ComponentUtils.setErrorLabel(lbOldPassword, isErrorOldPassword, (txtErrorOldPassword != null ? txtErrorOldPassword : currentOldPassword));
        ComponentUtils.setErrorLabel(lbNewPassword, isErrorNewPassword, (txtErrorNewPassword != null ? txtErrorNewPassword : currentNewPassword));
        ComponentUtils.setErrorLabel(lbConfirmPassword, isErrorConfirmPassword, (txtErrorConfirmPassword != null ? txtErrorConfirmPassword : currentConfirmPassword));

        if (isErrorOldPassword || isErrorNewPassword || isErrorConfirmPassword) {
            return;
        }

	SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
	    @Override
	    protected Boolean doInBackground() throws Exception {
		return MessageModal.confirmInfo("Thay đổi mật khẩu đã chọn?");
	    }

	    @Override
	    protected void done() {
		try {
		    if (get()) {
			executorService.submit(() -> {
			    try {
				nhanVienService.changePassword(oldPassword, newPassword, confirmPassword);
				MessageModal.success("Thay đổi mật khẩu thành công.");
				ModalDialog.closeAllModal();
			    } catch(ServiceResponseException e) {
				MessageModal.error(e.getMessage());
			    } catch(Exception e) {
				MessageModal.error(ErrorConstant.DEFAULT_ERROR);
			    } finally { 
				loadingDialog.dispose();
			    }
			});
			loadingDialog.setVisible(true);
		    }
		} catch (Exception ex) {
		}
	    }
	    
	};
	worker.execute();
        
    }

    private void redirectLogin(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
            ApplicationController.getInstance().show(new LoginView());
        }
    }
}
